# CI Pipeline - Sprint 3: User Experience & Data Quality
name: Sprint 3 - User Features CI

# Only runs when Sprint 3 is enabled
on:
  push:
    branches: [ main ]
    paths:
      - 'cmd/**'
      - 'internal/**' 
      - 'pkg/**'
      - 'web/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/ci-sprint-3.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'web/**'
      - 'go.mod'
      - 'go.sum'

env:
  GO_VERSION: '1.21'
  DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/proteinprices_test?sslmode=disable'
  REDIS_URL: 'redis://localhost:6379'

jobs:
  # Sprint 3 Foundation (includes Sprint 1+2)
  foundation-tests:
    name: Sprint 3 Foundation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Setup PostgreSQL database
      run: |
        make migrate-up-test
    
    - name: Run foundation tests (Sprint 1+2+3)
      run: |
        echo "Running comprehensive foundation tests..."
        # Core components
        if [ -d "internal/database" ]; then
          go test -v -race ./internal/database/...
        fi
        if [ -d "internal/models" ]; then
          go test -v -race ./internal/models/...
        fi
        if [ -d "internal/config" ]; then
          go test -v -race ./internal/config/...
        fi
        # Authentication (Sprint 2)
        if [ -d "internal/auth" ]; then
          go test -v -race ./internal/auth/...
        fi
        if [ -d "internal/users" ]; then
          go test -v -race ./internal/users/...
        fi
        # Alerts (Sprint 2)
        if [ -d "internal/alerts" ]; then
          go test -v -race ./internal/alerts/...
        fi

  # User Features Tests (Sprint 3)
  user-features-tests:
    name: User Features Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: foundation-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test favorites system
      run: |
        if [ -d "internal/favorites" ]; then
          echo "Testing user favorites system..."
          go test -v -race ./internal/favorites/...
        fi
    
    - name: Test search history (anonymized)
      run: |
        if [ -d "internal/history" ]; then
          echo "Testing privacy-compliant search history..."
          go test -v -race ./internal/history/...
        fi
    
    - name: Test recommendation engine
      run: |
        if [ -d "internal/recommendations" ]; then
          echo "Testing basic recommendation engine..."
          go test -v -race ./internal/recommendations/...
        fi
    
    - name: Test user dashboard
      run: |
        if [ -d "internal/dashboard" ]; then
          echo "Testing user analytics dashboard..."
          go test -v -race ./internal/dashboard/...
        fi

  # Data Quality Tests (Sprint 3)
  data-quality-tests:
    name: Advanced Data Quality Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: foundation-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test price validation rules
      run: |
        if [ -d "internal/validation" ]; then
          echo "Testing configurable price validation..."
          go test -v -race -run TestPriceValidation ./internal/validation/...
        fi
    
    - name: Test confidence scoring
      run: |
        if [ -d "internal/scoring" ]; then
          echo "Testing price confidence scoring (0.0-1.0)..."
          go test -v -race ./internal/scoring/...
        fi
    
    - name: Test manual review queue
      run: |
        if [ -d "internal/review" ]; then
          echo "Testing suspicious price review system..."
          go test -v -race ./internal/review/...
        fi
    
    - name: Test price trend analysis
      run: |
        if [ -d "internal/trends" ]; then
          echo "Testing price trend analysis and anomaly detection..."
          go test -v -race ./internal/trends/...
        fi

  # Enhanced Search Tests (Sprint 3)
  enhanced-search-tests:
    name: Search & Discovery Enhancement Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: foundation-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test advanced search filters
      run: |
        if [ -d "internal/search" ]; then
          echo "Testing advanced search filters (protein content, serving size, brand)..."
          go test -v -race -run TestAdvancedFilters ./internal/search/...
        fi
    
    - name: Test search result sorting
      run: |
        if [ -d "internal/search" ]; then
          echo "Testing search sorting (price, protein/₹, popularity, reviews)..."
          go test -v -race -run TestSearchSorting ./internal/search/...
        fi
    
    - name: Test category browsing
      run: |
        if [ -d "internal/categories" ]; then
          echo "Testing category navigation with breadcrumbs..."
          go test -v -race ./internal/categories/...
        fi
    
    - name: Test search performance
      run: |
        if [ -d "internal/search" ]; then
          echo "Testing search performance (<100ms target)..."
          go test -v -race -run TestSearchPerformance ./internal/search/...
        fi

  # User Experience Integration Tests
  ux-integration-tests:
    name: User Experience Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [user-features-tests, enhanced-search-tests]
    if: always()
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test complete user journey
      run: |
        if [ -d "tests/integration/user_journey" ]; then
          echo "Testing complete user journey: search → favorites → alerts → recommendations..."
          go test -v -race ./tests/integration/user_journey/...
        fi
    
    - name: Test search-to-recommendation flow
      run: |
        if [ -d "tests/integration/recommendations" ]; then
          echo "Testing search history to recommendations pipeline..."
          go test -v -race ./tests/integration/recommendations/...
        fi
    
    - name: Test dashboard data aggregation
      run: |
        if [ -d "tests/integration/dashboard" ]; then
          echo "Testing user dashboard data aggregation..."
          go test -v -race ./tests/integration/dashboard/...
        fi

  # Data Quality Integration Tests
  data-quality-integration:
    name: Data Quality Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: data-quality-tests
    if: always()
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test validation pipeline
      run: |
        if [ -d "tests/integration/validation" ]; then
          echo "Testing price validation → confidence scoring → review queue pipeline..."
          go test -v -race ./tests/integration/validation/...
        fi
    
    - name: Test anomaly detection
      run: |
        if [ -d "tests/integration/anomaly" ]; then
          echo "Testing price anomaly detection and alerting..."
          go test -v -race ./tests/integration/anomaly/...
        fi

  # Bundle Size Validation (Sprint 3)
  bundle-size-check:
    name: Bundle Size Validation (<14KB)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Check Sprint 3 bundle size
      run: |
        echo "Validating Sprint 3 bundle size including user features..."
        if [ -d "web/static" ]; then
          total_size=0
          for file in web/static/*.html web/static/*.css web/static/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
              total_size=$((total_size + size))
              echo "$(basename "$file"): ${size} bytes"
            fi
          done
          echo "Total bundle size: ${total_size} bytes"
          total_size_kb=$((total_size / 1024))
          echo "Total bundle size: ${total_size_kb} KB"
          
          if [ $total_size -gt 14336 ]; then
            echo "❌ Bundle size (${total_size} bytes) exceeds 14KB limit!"
            echo "Sprint 3 adds user features - ensure JS optimizations are applied"
            exit 1
          else
            echo "✅ Bundle size (${total_size} bytes) is within 14KB limit"
          fi
        else
          echo "Frontend directory does not exist yet"
          echo "✅ Bundle size validation passed (no frontend yet)"
        fi

  # Sprint 3 Summary
  sprint-3-summary:
    name: Sprint 3 Status Summary
    runs-on: ubuntu-latest
    needs: [foundation-tests, user-features-tests, data-quality-tests, enhanced-search-tests, ux-integration-tests, data-quality-integration, bundle-size-check]
    if: always()
    
    steps:
    - name: Sprint 3 Progress Summary
      run: |
        echo "## 👤 Sprint 3 User Experience & Data Quality Progress"
        echo ""
        echo "### User Features Status:"
        echo "- ⏳ Favorites System (implement in internal/favorites/)"
        echo "- ⏳ Search History (implement privacy-compliant storage in internal/history/)"
        echo "- ⏳ Basic Recommendations (implement in internal/recommendations/)"
        echo "- ⏳ User Dashboard (implement analytics in internal/dashboard/)"
        echo ""
        echo "### Data Quality Status:"
        echo "- ⏳ Price Validation Rules (implement configurable ranges in internal/validation/)"
        echo "- ⏳ Confidence Scoring (implement 0.0-1.0 scoring in internal/scoring/)"
        echo "- ⏳ Manual Review Queue (implement admin interface in internal/review/)"
        echo "- ⏳ Price Trend Analysis (implement anomaly detection in internal/trends/)"
        echo ""
        echo "### Search Enhancement Status:"
        echo "- ⏳ Advanced Filters (implement protein content, serving size filters)"
        echo "- ⏳ Search Sorting (implement price, protein/₹, popularity sorting)"
        echo "- ⏳ Category Navigation (implement breadcrumb navigation)"
        echo "- ⏳ Search Performance (optimize for <100ms response time)"
        echo ""
        echo "### Next Steps for Sprint 3:"
        echo "1. Implement user favorites with save/unsave functionality"
        echo "2. Create privacy-compliant search history storage"
        echo "3. Build basic recommendation engine using search patterns"
        echo "4. Add user dashboard with personal analytics"
        echo "5. Implement configurable price validation rules"
        echo "6. Create confidence scoring system for price data"
        echo "7. Build admin interface for manual price review"
        echo "8. Add advanced search filters and sorting options"
        echo ""
        echo "### Foundation Ready:"
        echo "- ✅ Authentication system supports user features"
        echo "- ✅ Database schema includes user preferences and history"
        echo "- ✅ Bundle size validation enforces <14KB limit"
        echo "- ✅ CI pipeline validates user experience components"
        echo "- ✅ Data quality pipeline includes validation and scoring"