# CI Pipeline - GitHub Flow Strategy
name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Fast feedback - runs critical tests first
  critical-tests:
    name: Critical Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run critical unit tests
      run: |
        go test -v -race -short -tags=critical -coverprofile=coverage-critical.out ./internal/...
        go test -v -race -short -tags=critical ./pkg/...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: proteinprices_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload critical coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage-critical.out
        flags: critical

  # Comprehensive testing per service
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: critical-tests
    
    strategy:
      matrix:
        service: [api, scraper, mcp]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run comprehensive tests for ${{ matrix.service }}
      run: |
        go test -v -race -coverprofile=coverage-${{ matrix.service }}.out -covermode=atomic ./cmd/${{ matrix.service }}/...
        go test -v -race -coverprofile=coverage-${{ matrix.service }}-internal.out -covermode=atomic ./internal/...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: proteinprices_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage for ${{ matrix.service }}
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage-${{ matrix.service }}.out,./coverage-${{ matrix.service }}-internal.out
        flags: ${{ matrix.service }}

  # Integration tests - pre-merge check
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: critical-tests
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run database migrations
      run: make migrate-up-test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: proteinprices_test
        DB_USER: postgres
        DB_PASSWORD: postgres

    - name: Run integration tests
      run: |
        go test -v -tags=integration ./tests/integration/...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: proteinprices_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # E2E tests - pre-merge check
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [critical-tests, integration-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate mock data for testing
      run: make generate-test-data

    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: Wait for services to be healthy
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done'

    - name: Run E2E tests
      run: |
        docker-compose -f docker-compose.test.yml exec -T api go test -v -tags=e2e ./tests/e2e/...

    - name: Collect service logs
      if: failure()
      run: |
        docker-compose -f docker-compose.test.yml logs > e2e-logs.txt

    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-logs
        path: e2e-logs.txt

    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Security and quality gates
  security-quality:
    name: Security & Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for SonarCloud
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run gosec security scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: License compliance check
      uses: fossa-contrib/fossa-action@v2
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  # Frontend validation
  frontend-validation:
    name: Frontend Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/static/package-lock.json
        
    - name: Install dependencies
      working-directory: web/static
      run: npm ci
      
    - name: Run ESLint
      working-directory: web/static
      run: npm run lint
      
    - name: Build frontend
      working-directory: web/static
      run: npm run build
      
    - name: Validate bundle size (<14KB)
      working-directory: web/static
      run: |
        size=$(du -b dist/*.js dist/*.css | awk '{sum += $1} END {print sum}')
        if [ $size -gt 14336 ]; then
          echo "❌ Bundle size ($size bytes) exceeds 14KB limit"
          exit 1
        else
          echo "✅ Bundle size ($size bytes) is within 14KB limit"
        fi
        
    - name: Run frontend tests
      working-directory: web/static
      run: npm test

  # Build Docker images per service
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [comprehensive-tests, integration-tests, security-quality, frontend-validation]
    
    strategy:
      matrix:
        service: [api, scraper, mcp]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build ${{ matrix.service }} image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile.${{ matrix.service }}
        target: production
        push: false
        tags: proteinprices-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test ${{ matrix.service }} container startup
      run: |
        docker run --rm --name test-${{ matrix.service }} \
          proteinprices-${{ matrix.service }}:${{ github.sha }} \
          --help || echo "Container started successfully"

  # Deployment readiness
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: All checks passed
      run: |
        echo "🚀 All quality gates passed!"
        echo "✅ Critical tests: PASSED"
        echo "✅ Comprehensive tests: PASSED" 
        echo "✅ Integration tests: PASSED"
        echo "✅ E2E tests: PASSED"
        echo "✅ Security scans: PASSED"
        echo "✅ Frontend validation: PASSED"
        echo "✅ Docker images: BUILT"
        echo ""
        echo "📦 Ready for deployment to staging"
        echo "SHA: ${{ github.sha }}"
        echo "Ref: ${{ github.ref }}"