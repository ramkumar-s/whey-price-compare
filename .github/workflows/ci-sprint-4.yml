# CI Pipeline - Sprint 4: API Excellence & MCP Integration
name: Sprint 4 - API Excellence CI

# Only runs when Sprint 4 is enabled
on:
  push:
    branches: [ main ]
    paths:
      - 'cmd/**'
      - 'internal/**' 
      - 'pkg/**'
      - 'web/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/ci-sprint-4.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'web/**'
      - 'go.mod'
      - 'go.sum'

env:
  GO_VERSION: '1.21'
  DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/proteinprices_test?sslmode=disable'
  REDIS_URL: 'redis://localhost:6379'

jobs:
  # Sprint 4 Foundation (includes Sprint 1+2+3)
  foundation-tests:
    name: Sprint 4 Foundation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Setup PostgreSQL database
      run: |
        make migrate-up-test
    
    - name: Run comprehensive foundation tests
      run: |
        echo "Running comprehensive foundation tests (Sprints 1-4)..."
        # Core components (Sprint 1)
        if [ -d "internal/database" ]; then
          go test -v -race ./internal/database/...
        fi
        if [ -d "internal/models" ]; then
          go test -v -race ./internal/models/...
        fi
        # Authentication (Sprint 2)
        if [ -d "internal/auth" ]; then
          go test -v -race ./internal/auth/...
        fi
        if [ -d "internal/alerts" ]; then
          go test -v -race ./internal/alerts/...
        fi
        # User features (Sprint 3)
        if [ -d "internal/favorites" ]; then
          go test -v -race ./internal/favorites/...
        fi
        if [ -d "internal/recommendations" ]; then
          go test -v -race ./internal/recommendations/...
        fi
        # Data quality (Sprint 3)
        if [ -d "internal/validation" ]; then
          go test -v -race ./internal/validation/...
        fi
        if [ -d "internal/scoring" ]; then
          go test -v -race ./internal/scoring/...
        fi

  # Production API Features Tests (Sprint 4)
  production-api-tests:
    name: Production API Features Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: foundation-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test API key management
      run: |
        if [ -d "internal/apikeys" ]; then
          echo "Testing B2B API key generation and management..."
          go test -v -race ./internal/apikeys/...
        fi
    
    - name: Test tiered rate limiting
      run: |
        if [ -d "internal/ratelimit" ]; then
          echo "Testing tiered rate limiting (public/user/premium/API)..."
          go test -v -race ./internal/ratelimit/...
        fi
    
    - name: Test OpenAPI documentation
      run: |
        if [ -d "internal/docs" ]; then
          echo "Testing auto-generated OpenAPI documentation..."
          go test -v -race ./internal/docs/...
        fi
    
    - name: Test comprehensive error handling
      run: |
        if [ -d "internal/errors" ]; then
          echo "Testing standardized error responses..."
          go test -v -race ./internal/errors/...
        fi
    
    - name: Test API logging and metrics
      run: |
        if [ -d "internal/metrics" ]; then
          echo "Testing API call logging with performance metrics..."
          go test -v -race ./internal/metrics/...
        fi

  # MCP Server Tests (Sprint 4)
  mcp-server-tests:
    name: MCP Server Implementation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: foundation-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test JSON-RPC 2.0 server
      run: |
        if [ -d "internal/mcp" ]; then
          echo "Testing MCP JSON-RPC 2.0 server implementation..."
          go test -v -race -run TestJSONRPC ./internal/mcp/...
        fi
    
    - name: Test product search MCP tool
      run: |
        if [ -d "internal/mcp/tools" ]; then
          echo "Testing AI product search tool..."
          go test -v -race -run TestProductSearchTool ./internal/mcp/tools/...
        fi
    
    - name: Test price comparison MCP tool
      run: |
        if [ -d "internal/mcp/tools" ]; then
          echo "Testing AI price comparison tool..."
          go test -v -race -run TestPriceComparisonTool ./internal/mcp/tools/...
        fi
    
    - name: Test price history MCP tool
      run: |
        if [ -d "internal/mcp/tools" ]; then
          echo "Testing AI price history tool..."
          go test -v -race -run TestPriceHistoryTool ./internal/mcp/tools/...
        fi
    
    - name: Test nutrition comparison MCP tool
      run: |
        if [ -d "internal/mcp/tools" ]; then
          echo "Testing AI nutrition comparison tool..."
          go test -v -race -run TestNutritionTool ./internal/mcp/tools/...
        fi
    
    - name: Test MCP server binary
      run: |
        if [ -f "cmd/mcp/main.go" ]; then
          echo "Testing MCP server binary startup..."
          go build -o bin/mcp-server ./cmd/mcp
          timeout 10s ./bin/mcp-server --test-mode || echo "MCP server test completed"
        fi

  # Performance Optimization Tests (Sprint 4)
  performance-tests:
    name: Performance Optimization Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: foundation-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test Redis caching strategy
      run: |
        if [ -d "internal/cache" ]; then
          echo "Testing Redis caching for >90% hit rate..."
          go test -v -race -run TestCacheHitRate ./internal/cache/...
        fi
    
    - name: Test database query optimization
      run: |
        if [ -d "internal/database" ]; then
          echo "Testing database query performance (<200ms)..."
          go test -v -race -run TestQueryPerformance ./internal/database/...
        fi
    
    - name: Test response compression
      run: |
        if [ -d "internal/compression" ]; then
          echo "Testing response compression (70% bandwidth reduction)..."
          go test -v -race ./internal/compression/...
        fi

  # API Integration Tests (Sprint 4)
  api-integration-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [production-api-tests, mcp-server-tests]
    if: always()
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proteinprices_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup database
      run: make migrate-up-test
    
    - name: Test B2B API workflow
      run: |
        if [ -d "tests/integration/b2b" ]; then
          echo "Testing complete B2B API workflow: API key → rate limiting → responses..."
          go test -v -race ./tests/integration/b2b/...
        fi
    
    - name: Test MCP integration with API
      run: |
        if [ -d "tests/integration/mcp" ]; then
          echo "Testing MCP server integration with main API..."
          go test -v -race ./tests/integration/mcp/...
        fi
    
    - name: Test API performance under load
      run: |
        if [ -d "tests/integration/performance" ]; then
          echo "Testing API performance with caching and optimization..."
          go test -v -race ./tests/integration/performance/...
        fi

  # MCP Protocol Validation
  mcp-protocol-validation:
    name: MCP Protocol Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: mcp-server-tests
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Python (for MCP client testing)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install MCP client tools
      run: |
        pip install mcp anthropic-sdk
    
    - name: Test MCP protocol compliance
      run: |
        if [ -f "cmd/mcp/main.go" ]; then
          echo "Testing MCP JSON-RPC 2.0 protocol compliance..."
          # Start MCP server in background
          go run ./cmd/mcp --test-mode &
          MCP_PID=$!
          sleep 5
          
          # Test protocol compliance with Python client
          if [ -f "tests/mcp/protocol_test.py" ]; then
            python tests/mcp/protocol_test.py
          fi
          
          # Cleanup
          kill $MCP_PID || true
        else
          echo "MCP server not implemented yet"
        fi
    
    - name: Test MCP tool discovery
      run: |
        if [ -d "tests/mcp" ]; then
          echo "Testing MCP tool discovery and metadata..."
          go test -v -race ./tests/mcp/...
        fi

  # Bundle Size Validation (Sprint 4)
  bundle-size-check:
    name: Bundle Size Validation (<14KB)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Check Sprint 4 bundle size
      run: |
        echo "Validating Sprint 4 bundle size with API documentation features..."
        if [ -d "web/static" ]; then
          total_size=0
          for file in web/static/*.html web/static/*.css web/static/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
              total_size=$((total_size + size))
              echo "$(basename "$file"): ${size} bytes"
            fi
          done
          
          # Check for API documentation assets
          if [ -d "web/static/api-docs" ]; then
            for file in web/static/api-docs/*; do
              if [ -f "$file" ]; then
                size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
                total_size=$((total_size + size))
                echo "api-docs/$(basename "$file"): ${size} bytes"
              fi
            done
          fi
          
          echo "Total bundle size: ${total_size} bytes"
          total_size_kb=$((total_size / 1024))
          echo "Total bundle size: ${total_size_kb} KB"
          
          if [ $total_size -gt 14336 ]; then
            echo "❌ Bundle size (${total_size} bytes) exceeds 14KB limit!"
            echo "Sprint 4 adds API docs - ensure minimal JS for interactive documentation"
            exit 1
          else
            echo "✅ Bundle size (${total_size} bytes) is within 14KB limit"
          fi
        else
          echo "Frontend directory does not exist yet"
          echo "✅ Bundle size validation passed (no frontend yet)"
        fi

  # Sprint 4 Summary
  sprint-4-summary:
    name: Sprint 4 Status Summary
    runs-on: ubuntu-latest
    needs: [foundation-tests, production-api-tests, mcp-server-tests, performance-tests, api-integration-tests, mcp-protocol-validation, bundle-size-check]
    if: always()
    
    steps:
    - name: Sprint 4 Progress Summary
      run: |
        echo "## 🚀 Sprint 4 API Excellence & MCP Integration Progress"
        echo ""
        echo "### Production API Features Status:"
        echo "- ⏳ API Key Management (implement B2B customer keys in internal/apikeys/)"
        echo "- ⏳ Tiered Rate Limiting (implement public/user/premium/API limits)"
        echo "- ⏳ OpenAPI Documentation (implement auto-generated interactive docs)"
        echo "- ⏳ Comprehensive Error Handling (implement standardized responses)"
        echo "- ⏳ API Logging & Metrics (implement performance tracking)"
        echo ""
        echo "### MCP Server Implementation Status:"
        echo "- ⏳ JSON-RPC 2.0 Server (implement MCP protocol in cmd/mcp/)"
        echo "- ⏳ Product Search Tool (implement AI-accessible search)"
        echo "- ⏳ Price Comparison Tool (implement structured comparison for AI)"
        echo "- ⏳ Price History Tool (implement historical data access)"
        echo "- ⏳ Nutrition Comparison Tool (implement nutritional analysis)"
        echo ""
        echo "### Performance Optimization Status:"
        echo "- ⏳ Redis Caching Strategy (implement >90% cache hit rate)"
        echo "- ⏳ Database Query Optimization (ensure <200ms responses)"
        echo "- ⏳ Response Compression (implement 70% bandwidth reduction)"
        echo ""
        echo "### Next Steps for Sprint 4:"
        echo "1. Implement B2B API key system with generation/revocation"
        echo "2. Create tiered rate limiting based on user authentication level"
        echo "3. Generate interactive OpenAPI documentation"
        echo "4. Standardize error handling across all endpoints"
        echo "5. Build MCP server with JSON-RPC 2.0 protocol"
        echo "6. Implement 5 MCP tools for AI assistant integration"
        echo "7. Optimize Redis caching for high hit rates"
        echo "8. Implement response compression and database optimizations"
        echo ""
        echo "### Foundation Ready:"
        echo "- ✅ Comprehensive user system supports API tiers"
        echo "- ✅ Database optimized for high-performance queries"
        echo "- ✅ Bundle size validation enforces <14KB limit"
        echo "- ✅ CI pipeline validates production API features"
        echo "- ✅ MCP protocol testing ensures AI compatibility"
        echo "- ✅ Performance tests validate optimization goals"