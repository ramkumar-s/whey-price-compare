# CD Pipeline - Automatic deployment to staging
name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main]
    types:
      - completed

env:
  GO_VERSION: '1.24'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: staging
    
    strategy:
      matrix:
        service: [api, scraper, mcp]
      max-parallel: 1  # Deploy services sequentially
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build ${{ matrix.service }} image for staging
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile.${{ matrix.service }}
        target: production
        push: false
        tags: proteinprices-${{ matrix.service }}:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Save ${{ matrix.service }} image
      run: |
        docker save proteinprices-${{ matrix.service }}:staging-${{ github.sha }} | gzip > ${{ matrix.service }}-staging.tar.gz

    - name: Copy image to staging server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        source: "${{ matrix.service }}-staging.tar.gz"
        target: "/tmp/"

    - name: Deploy ${{ matrix.service }} to staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/proteinprices-staging
          
          # Load new image
          docker load < /tmp/${{ matrix.service }}-staging.tar.gz
          
          # Tag for staging deployment
          docker tag proteinprices-${{ matrix.service }}:staging-${{ github.sha }} proteinprices-${{ matrix.service }}:staging-latest
          
          # Update docker-compose to use new image
          sed -i 's|proteinprices-${{ matrix.service }}:staging-latest|proteinprices-${{ matrix.service }}:staging-${{ github.sha }}|g' docker-compose.staging.yml
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.staging.yml up -d ${{ matrix.service }}
          
          # Wait for service to be healthy
          sleep 30
          
          # Health check
          if ! curl -f http://localhost:8080/health; then
            echo "Health check failed, rolling back..."
            docker-compose -f docker-compose.staging.yml rollback ${{ matrix.service }}
            exit 1
          fi
          
          # Clean up old images
          docker image prune -f
          
          echo "‚úÖ ${{ matrix.service }} deployed successfully to staging"

  # Run database migrations if needed
  migrate-staging:
    name: Database Migration (Staging)
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run database migrations on staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/proteinprices-staging
          
          # Check if there are pending migrations
          if docker-compose -f docker-compose.staging.yml exec -T api /app/migrate status | grep -q "dirty\|pending"; then
            echo "Running database migrations..."
            
            # Backup database before migration
            docker-compose -f docker-compose.staging.yml exec -T postgres pg_dump -U proteinprices proteinprices | gzip > /opt/backups/staging-pre-migration-$(date +%Y%m%d_%H%M%S).sql.gz
            
            # Run migrations
            docker-compose -f docker-compose.staging.yml exec -T api /app/migrate up
            
            echo "‚úÖ Database migrations completed"
          else
            echo "‚ÑπÔ∏è  No pending migrations"
          fi

  # Post-deployment tests
  staging-smoke-tests:
    name: Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, migrate-staging]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run smoke tests against staging
      run: |
        go test -v -tags=smoke ./tests/smoke/...
      env:
        TEST_BASE_URL: ${{ secrets.STAGING_URL }}
        TEST_API_KEY: ${{ secrets.STAGING_API_KEY }}

    - name: Validate staging deployment
      run: |
        # Test API endpoints
        curl -f ${{ secrets.STAGING_URL }}/health
        curl -f ${{ secrets.STAGING_URL }}/api/products/search?q=test
        
        # Test MCP server
        curl -f ${{ secrets.STAGING_URL }}/mcp/capabilities
        
        echo "‚úÖ Staging deployment validated"

  # Generate test data for staging
  seed-staging-data:
    name: Seed Staging Data
    runs-on: ubuntu-latest
    needs: staging-smoke-tests
    environment: staging
    
    steps:
    - name: Generate mock data for staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/proteinprices-staging
          
          # Generate consistent mock data
          docker-compose -f docker-compose.staging.yml exec -T api /app/seed --env=staging
          
          echo "‚úÖ Staging data seeded successfully"

  # Notify deployment completion
  notify-staging-success:
    name: Notify Staging Success
    runs-on: ubuntu-latest
    needs: [staging-smoke-tests, seed-staging-data]
    
    steps:
    - name: Staging deployment successful
      run: |
        echo "üéâ Staging deployment completed successfully!"
        echo "üîó Staging URL: ${{ secrets.STAGING_URL }}"
        echo "üìä Monitoring: ${{ secrets.STAGING_URL }}/monitoring"
        echo "üìù Commit: ${{ github.sha }}"
        echo ""
        echo "‚úÖ All services deployed and validated"
        echo "‚úÖ Database migrations completed"
        echo "‚úÖ Smoke tests passed"
        echo "‚úÖ Test data seeded"